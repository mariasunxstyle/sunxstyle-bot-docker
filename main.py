import logging
import os
from aiogram import Bot, Dispatcher, executor, types
from steps import steps

print("üü¢ –ë–æ—Ç —Å—Ç–∞—Ä—Ç—É–µ—Ç...")

logging.basicConfig(level=logging.INFO)

API_TOKEN = os.getenv("TOKEN")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

async def check_subscription(user_id):
    try:
        member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return member.status in ["creator", "administrator", "member"]
    except:
        return False

@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    if not await check_subscription(message.from_user.id):
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", url="https://t.me/sunxstyle"))
        await message.answer("–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @sunxstyle, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å ‚òÄÔ∏è", reply_markup=kb)
        return

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for step in steps:
        m = step['duration_min']
        keyboard.add(f"–®–∞–≥ {step['step']} ({m} –º–∏–Ω)")
    keyboard.add("‚ÑπÔ∏è –ò–Ω—Ñ–æ")
    await message.answer("–ü—Ä–∏–≤–µ—Ç, —Å–æ–ª–Ω—Ü–µ! ‚òÄÔ∏è –í—ã–±–µ—Ä–∏ —à–∞–≥:", reply_markup=keyboard)

@dp.message_handler(lambda message: message.text.startswith("–®–∞–≥"))
async def handle_step(message: types.Message):
    await message.reply("–°–ª–µ–¥–∏ –∑–∞ –≤—Ä–µ–º–µ–Ω–µ–º –∏ –ø–æ–ª–æ–∂–µ–Ω–∏–µ–º —Ç–µ–ª–∞ ‚òÄÔ∏è")

@dp.message_handler(lambda message: message.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ")
async def handle_info(message: types.Message):
    await message.reply("‚ÑπÔ∏è –ú–µ—Ç–æ–¥ —Å—É–ø–µ—Ä–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ ‚Äî —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ—à–∞–≥–æ–≤—ã–π –∑–∞–≥–∞—Ä...")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
